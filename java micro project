import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class Main {

    // Structure for questions and their options
    static class Question {
        String questionText;
        String[] options;
        int correctOptionIndex;

        // Constructor
        Question(String questionText, String[] options, int correctOptionIndex) {
            this.questionText = questionText;
            this.options = options;
            this.correctOptionIndex = correctOptionIndex;
        }

        // Method to display question and options
        void displayQuestion() {
            System.out.println(questionText);
            for (int i = 0; i < options.length; i++) {
                System.out.println((i + 1) + ". " + options[i]);
            }
        }

        // Check if the user's answer is correct
        boolean checkAnswer(int userAnswer) {
            return userAnswer == correctOptionIndex;
        }

        // Method to display the question with its answer
        void displayQuestionWithAnswer() {
            System.out.println(questionText);
            for (int i = 0; i < options.length; i++) {
                System.out.println((i + 1) + ". " + options[i]);
            }
            System.out.println("Correct answer: " + options[correctOptionIndex - 1]);
        }
    }

    // Method for teacher to modify, add, remove, or view questions
    private static void teacherOptions(ArrayList<Question> questions, Scanner scanner) {
        System.out.println("\nTeacher Menu:");
        System.out.println("1. Add a new question");
        System.out.println("2. Modify an existing question");
        System.out.println("3. Remove a question");
        System.out.println("4. View all questions with answers");
        System.out.println("5. Exit to main menu");
        System.out.print("Choose an option: ");
       
        int choice = scanner.nextInt();
        scanner.nextLine();  // consume the newline

        switch (choice) {
            case 1: // Add new question
                System.out.print("Enter the new question: ");
                String questionText = scanner.nextLine();

                String[] options = new String[4];
                for (int i = 0; i < 4; i++) {
                    System.out.print("Enter option " + (i + 1) + ": ");
                    options[i] = scanner.nextLine();
                }

                System.out.print("Enter the number (1-4) of the correct option: ");
                int correctOptionIndex = scanner.nextInt();
                scanner.nextLine();  // consume the newline
               
                questions.add(new Question(questionText, options, correctOptionIndex));
                System.out.println("New question added!");
                break;

            case 2: // Modify an existing question
                System.out.println("Which question would you like to modify?");
                for (int i = 0; i < questions.size(); i++) {
                    System.out.println((i + 1) + ". " + questions.get(i).questionText);
                }

                int modifyIndex = scanner.nextInt() - 1;
                scanner.nextLine();  // consume the newline

                if (modifyIndex >= 0 && modifyIndex < questions.size()) {
                    System.out.print("Enter the new question text: ");
                    String newQuestionText = scanner.nextLine();

                    String[] newOptions = new String[4];
                    for (int i = 0; i < 4; i++) {
                        System.out.print("Enter option " + (i + 1) + ": ");
                        newOptions[i] = scanner.nextLine();
                    }

                    System.out.print("Enter the number (1-4) of the correct option: ");
                    int newCorrectOptionIndex = scanner.nextInt();
                    scanner.nextLine();  // consume the newline
                   
                    // Update the question
                    Question updatedQuestion = new Question(newQuestionText, newOptions, newCorrectOptionIndex);
                    questions.set(modifyIndex, updatedQuestion);
                    System.out.println("Question updated!");
                } else {
                    System.out.println("Invalid question number.");
                }
                break;

            case 3: // Remove a question
                System.out.println("Which question would you like to remove?");
                for (int i = 0; i < questions.size(); i++) {
                    System.out.println((i + 1) + ". " + questions.get(i).questionText);
                }

                int removeIndex = scanner.nextInt() - 1;
                scanner.nextLine();  // consume the newline

                if (removeIndex >= 0 && removeIndex < questions.size()) {
                    questions.remove(removeIndex);
                    System.out.println("Question removed!");
                } else {
                    System.out.println("Invalid question number.");
                }
                break;

            case 4: // View all questions with answers
                System.out.println("\nAll Questions with Answers:");
                for (Question question : questions) {
                    question.displayQuestionWithAnswer();
                    System.out.println();
                }
                break;

            case 5: // Exit teacher menu
                System.out.println("Exiting to main menu.");
                break;

            default:
                System.out.println("Invalid choice! Returning to main menu.");
        }
    }

    // Method to display quiz for students with time limit
    private static void studentQuiz(ArrayList<Question> questions, Scanner scanner) {
        int score = 0;

        // Loop through the questions
        for (Question question : questions) {
            question.displayQuestion();

            // Start timer
            long startTime = System.currentTimeMillis();
            System.out.print("Enter your answer (1-4): ");

            int userAnswer = -1;
            boolean answered = false;

            while (System.currentTimeMillis() - startTime < 20000) {  // 5 seconds timer
                if (scanner.hasNextInt()) {
                    userAnswer = scanner.nextInt();
                    answered = true;
                    break;
                }
            }

            if (answered) {
                if (userAnswer >= 1 && userAnswer <= 4) {
                    if (question.checkAnswer(userAnswer)) {
                        System.out.println("Correct!\n");
                        score++;
                    } else {
                        System.out.println("Incorrect!\n");
                    }
                } else {
                    System.out.println("Invalid input. Please enter a number between 1 and 4.\n");
                }
            } else {
                System.out.println("Time's up! You didn't answer in time.\n");
                // No points for unanswered question (0 marks)
            }
        }

        // Display final score
        System.out.println("Your total score is: " + score + " out of " + questions.size());
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Sample questions
        ArrayList<Question> questions = new ArrayList<>();
        questions.add(new Question("What is the capital of France?",
            new String[]{"Berlin", "Madrid", "Paris", "Rome"}, 3));
        questions.add(new Question("Which planet is known as the Red Planet?",
            new String[]{"Earth", "Mars", "Jupiter", "Saturn"}, 2));
        questions.add(new Question("What is the largest ocean on Earth?",
            new String[]{"Atlantic", "Indian", "Arctic", "Pacific"}, 4));
        questions.add(new Question("Who wrote 'Hamlet'?",
            new String[]{"Charles Dickens", "Jane Austen", "William Shakespeare", "Mark Twain"}, 3));

        while (true) {
            System.out.println("Welcome to the Quiz Application!");
            System.out.print("Are you a student or a teacher? (Enter 'student' or 'teacher'): ");
            String role = scanner.nextLine().toLowerCase();

            if (role.equals("student")) {
                studentQuiz(questions, scanner);
                break;
            } else if (role.equals("teacher")) {
                // Teacher login with password
                System.out.print("Enter the teacher password: ");
                String password = scanner.nextLine();

                if (password.equals("teacher123")) { // Hardcoded password for simplicity
                    boolean exitTeacherMenu = false;
                    while (!exitTeacherMenu) {
                        teacherOptions(questions, scanner);
                        System.out.print("\nDo you want to perform another operation? (yes/no): ");
                        String continueOption = scanner.nextLine().toLowerCase();
                        if (continueOption.equals("no")) {
                            exitTeacherMenu = true;
                        }
                    }
                } else {
                    System.out.println("Incorrect password. Access denied.");
                }
            } else {
                System.out.println("Invalid role. Please enter 'student' or 'teacher'.");
            }
        }

        scanner.close();
    }
}
